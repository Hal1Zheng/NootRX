// Copyright Â© 2023-2024 ChefKiss. Licensed under the Thou Shalt Not Profit License version 1.5.
// See LICENSE for details.

#pragma once
#include <Headers/kern_util.hpp>

constexpr UInt32 AMDGPU_FAMILY_NAVI = 0x8F;

//-------- Generic Registers --------//

constexpr UInt32 mmPCIE_INDEX2 = 0xE;
constexpr UInt32 mmPCIE_DATA2 = 0xF;

//-------- GC Registers --------//

constexpr UInt32 mmCGTT_SPI_CS_CLK_CTRL = 0x507C;
constexpr UInt32 mmCGTT_SPI_CS_CLK_CTRL_BASE_IDX = 1;
constexpr UInt32 mmCGTT_SPI_PS_CLK_CTRL = 0x507D;
constexpr UInt32 mmCGTT_SPI_PS_CLK_CTRL_BASE_IDX = 1;
constexpr UInt32 mmCGTT_SPI_RA0_CLK_CTRL = 0x507A;
constexpr UInt32 mmCGTT_SPI_RA0_CLK_CTRL_BASE_IDX = 1;
constexpr UInt32 mmCGTT_SPI_RA1_CLK_CTRL = 0x507B;
constexpr UInt32 mmCGTT_SPI_RA1_CLK_CTRL_BASE_IDX = 1;
constexpr UInt32 mmCPF_GCR_CNTL = 0x1F53;
constexpr UInt32 mmCPF_GCR_CNTL_BASE_IDX = 0;
constexpr UInt32 mmDB_DEBUG3 = 0x13AE;
constexpr UInt32 mmDB_DEBUG3_BASE_IDX = 0;
constexpr UInt32 mmDB_DEBUG4 = 0x13AF;
constexpr UInt32 mmDB_DEBUG4_BASE_IDX = 0;
constexpr UInt32 mmDB_EXCEPTION_CONTROL = 0x13BF;
constexpr UInt32 mmDB_EXCEPTION_CONTROL_BASE_IDX = 0;
constexpr UInt32 mmGCEA_SDP_TAG_RESERVE0 = 0x189B;
constexpr UInt32 mmGCEA_SDP_TAG_RESERVE0_BASE_IDX = 1;
constexpr UInt32 mmGCEA_SDP_TAG_RESERVE1 = 0x189C;
constexpr UInt32 mmGCEA_SDP_TAG_RESERVE1_BASE_IDX = 1;
constexpr UInt32 mmGCR_GENERAL_CNTL = 0x1580;
constexpr UInt32 mmGCR_GENERAL_CNTL_BASE_IDX = 0;
constexpr UInt32 mmGCUTCL2_CGTT_CLK_CTRL_Sienna_Cichlid = 0x16F3;
constexpr UInt32 mmGCUTCL2_CGTT_CLK_CTRL_Sienna_Cichlid_BASE_IDX = 1;
constexpr UInt32 mmGCVM_L2_CGTT_CLK_CTRL_Sienna_Cichlid = 0x15DB;
constexpr UInt32 mmGCVM_L2_CGTT_CLK_CTRL_Sienna_Cichlid_BASE_IDX = 1;
constexpr UInt32 mmGE_PC_CNTL = 0xFE5;
constexpr UInt32 mmGE_PC_CNTL_BASE_IDX = 0;
constexpr UInt32 mmGL2A_ADDR_MATCH_MASK = 0x2E21;
constexpr UInt32 mmGL2A_ADDR_MATCH_MASK_BASE_IDX = 1;
constexpr UInt32 mmGL2C_ADDR_MATCH_MASK = 0x2E03;
constexpr UInt32 mmGL2C_ADDR_MATCH_MASK_BASE_IDX = 1;
constexpr UInt32 mmGL2C_CM_CTRL1 = 0x2E08;
constexpr UInt32 mmGL2C_CM_CTRL1_BASE_IDX = 1;
constexpr UInt32 mmGL2C_CTRL3 = 0x2E0C;
constexpr UInt32 mmGL2C_CTRL3_BASE_IDX = 1;
constexpr UInt32 mmLDS_CONFIG = 0x10A2;
constexpr UInt32 mmLDS_CONFIG_BASE_IDX = 0;
constexpr UInt32 mmPA_CL_ENHANCE = 0x1025;
constexpr UInt32 mmPA_CL_ENHANCE_BASE_IDX = 0;
constexpr UInt32 mmPA_SC_BINNER_TIMEOUT_COUNTER = 0x1070;
constexpr UInt32 mmPA_SC_BINNER_TIMEOUT_COUNTER_BASE_IDX = 0;
constexpr UInt32 mmPA_SC_ENHANCE_2 = 0x107C;
constexpr UInt32 mmPA_SC_ENHANCE_2_BASE_IDX = 0;
constexpr UInt32 mmSPI_CONFIG_CNTL_1 = 0x11EF;
constexpr UInt32 mmSPI_CONFIG_CNTL_1_BASE_IDX = 0;
constexpr UInt32 mmSPI_START_PHASE = 0x11DB;
constexpr UInt32 mmSPI_START_PHASE_BASE_IDX = 0;
constexpr UInt32 mmSQ_CONFIG = 0x10A0;
constexpr UInt32 mmSQ_CONFIG_BASE_IDX = 0;
constexpr UInt32 mmSQ_PERFCOUNTER0_SELECT = 0x39C0;
constexpr UInt32 mmSQ_PERFCOUNTER0_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER10_SELECT = 0x39CA;
constexpr UInt32 mmSQ_PERFCOUNTER10_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER11_SELECT = 0x39CB;
constexpr UInt32 mmSQ_PERFCOUNTER11_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER12_SELECT = 0x39CC;
constexpr UInt32 mmSQ_PERFCOUNTER12_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER13_SELECT = 0x39CD;
constexpr UInt32 mmSQ_PERFCOUNTER13_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER14_SELECT = 0x39CE;
constexpr UInt32 mmSQ_PERFCOUNTER14_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER15_SELECT = 0x39CF;
constexpr UInt32 mmSQ_PERFCOUNTER15_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER1_SELECT = 0x39C1;
constexpr UInt32 mmSQ_PERFCOUNTER1_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER2_SELECT = 0x39C2;
constexpr UInt32 mmSQ_PERFCOUNTER2_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER3_SELECT = 0x39C3;
constexpr UInt32 mmSQ_PERFCOUNTER3_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER4_SELECT = 0x39C4;
constexpr UInt32 mmSQ_PERFCOUNTER4_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER5_SELECT = 0x39C5;
constexpr UInt32 mmSQ_PERFCOUNTER5_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER6_SELECT = 0x39C6;
constexpr UInt32 mmSQ_PERFCOUNTER6_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER7_SELECT = 0x39C7;
constexpr UInt32 mmSQ_PERFCOUNTER7_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER8_SELECT = 0x39C8;
constexpr UInt32 mmSQ_PERFCOUNTER8_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSQ_PERFCOUNTER9_SELECT = 0x39C9;
constexpr UInt32 mmSQ_PERFCOUNTER9_SELECT_BASE_IDX = 1;
constexpr UInt32 mmSX_DEBUG_1 = 0x11B8;
constexpr UInt32 mmSX_DEBUG_1_BASE_IDX = 0;
constexpr UInt32 mmTA_CNTL_AUX = 0x12E2;
constexpr UInt32 mmTA_CNTL_AUX_BASE_IDX = 1;
constexpr UInt32 mmUTCL1_CTRL = 0x1588;
constexpr UInt32 mmUTCL1_CTRL_BASE_IDX = 0;
constexpr UInt32 mmVGT_GS_MAX_WAVE_ID = 0x1009;
constexpr UInt32 mmVGT_GS_MAX_WAVE_ID_BASE_IDX = 0;

//-------- AMD Catalyst Data Types --------//

struct CAILAsicCapsEntry {
    UInt32 familyId, deviceId;
    UInt32 revNo, emulatedRevNo;
    UInt32 revId;
    UInt32 _reserved;
    const UInt32 *caps;
    const UInt32 *skeleton;
} PACKED;

struct CAILAsicCapsInitEntry {
    UInt64 familyId, deviceId;
    UInt64 revision, extRevision;
    UInt64 pciRevision;
    const UInt32 *caps;
    const void *goldenCaps;
} PACKED;

enum CAILResult : UInt32 {
    kCAILResultSuccess = 0,
    kCAILResultInvalidArgument,
    kCAILResultGeneralFailure,
    kCAILResultResourcesExhausted,
    kCAILResultUnsupported,
};

struct CAILDeviceTypeEntry {
    UInt32 deviceId, deviceType;
} PACKED;

struct CAILIPGoldenRegister {
    const UInt32 regOffset;
    const UInt32 segment;
    const UInt32 andMask;
    const UInt32 orMask;
} PACKED;

#define GOLDEN_REGISTER(reg, and, or) \
    { .regOffset = reg, .segment = reg##_BASE_IDX, .andMask = and, .orMask = or }
#define GOLDEN_REGISTER_TERMINATOR \
    { .regOffset = 0xFFFFFFFF, .segment = 0xFFFFFFFF, .andMask = 0xFFFFFFFF, .orMask = 0xFFFFFFFF }

enum CAILIPType : UInt32 {
    kCAILIPTypeUnknown = 0,
    kCAILIPTypeGC = 11,
};

struct CAILASICGoldenRegisters {
    const CAILIPType ipType;
    const UInt32 instance;    // Not sure about that one.
    const CAILIPGoldenRegister *entries;
} PACKED;

#define GOLDEN_REGISTERS(type, inst, ents) \
    { .ipType = kCAILIPType##type, .instance = inst, .entries = ents }

#define GOLDEN_REGISTERS_TERMINATOR \
    { .ipType = kCAILIPTypeUnknown, .instance = 0, .entries = nullptr }

struct CAILASICGoldenSettings {
    // Golden settings for GPUs emulated using the Cadence Palladium Emulation platform. We don't care.
    const CAILASICGoldenRegisters *palladiumGoldenSettings;
    const CAILASICGoldenRegisters *goldenSettings;
} PACKED;

struct DeviceCapabilityEntry {
    UInt64 familyId, extRevision;
    UInt64 deviceId, revision, enumRevision;
    const void *swipInfo, *swipInfoMinimal;
    const UInt32 *devAttrFlags;
    CAILASICGoldenSettings *asicGoldenSettings;
    void *doorbellRange;
} PACKED;

enum AMDPSPCommand : UInt32 {
    kPSPCommandLoadTA = 1,
    kPSPCommandLoadASD = 4,
    kPSPCommandLoadIPFW = 6,
};

enum AMDUCodeID : UInt32 {
    kUCodeSMU = 0x01,
    kUCodeCE,
    kUCodePFP,
    kUCodeME,
    kUCodeMEC1JT,
    kUCodeMEC2JT,
    kUCodeMEC1,
    kUCodeMEC2,
    kUCodeMES,
    kUCodeMESStack,
    kUCodeRLC,
    kUCodeSDMA0,
    kUCodeVCN0 = 0xE,
    kUCodeRLCP = 0x16,
    kUCodeRLCSRListGPM,
    kUCodeRLCSRListSRM,
    kUCodeRLCSRListCntl,
    kUCodeRLCLX6Iram,
    kUCodeRLCLX6Dram,
    kUCodeVCNSram,
    kUCodeGlobalTapDelays = 0x1E,
    kUCodeSE0TapDelays,
    kUCodeSE1TapDelays,
    kUCodeSE2TapDelays,
    kUCodeSE3TapDelays,
    kUCodeDMCUB,
    kUCodeVCN1 = 0x2A,
};

struct CosReadConfigurationSettingInput {
    const char *settingName;
    uint32_t settingType;
    uint32_t outLen;
    void *outPtr;
};

struct CosReadConfigurationSettingOutput {
    uint32_t settingLen;
};

//-------- AMD Catalyst Constants --------//

constexpr UInt64 DEVICE_CAP_ENTRY_REV_DONT_CARE = 0xDEADCAFE;

static const UInt32 ddiCapsNavi2Universal[16] = {0x800001, 0x1FE, 0x0, 0x0, 0x200, 0x8000000, 0x8000000, 0x2,
    0x200A0101, 0xA20600, 0x42040028, 0x0, 0x0, 0x0, 0x0, 0x0};

//---- Golden Settings ----//

static const CAILIPGoldenRegister gcGoldenSettingsNavi21[] = {
    GOLDEN_REGISTER(mmCGTT_SPI_CS_CLK_CTRL, 0x78000000, 0x78000100),
    GOLDEN_REGISTER(mmCGTT_SPI_PS_CLK_CTRL, 0xFF7F0FFF, 0x78000100),
    GOLDEN_REGISTER(mmCGTT_SPI_RA0_CLK_CTRL, 0xFF7F0FFF, 0x30000100),
    GOLDEN_REGISTER(mmCGTT_SPI_RA1_CLK_CTRL, 0xFF7F0FFF, 0x7E000100),
    GOLDEN_REGISTER(mmCPF_GCR_CNTL, 0x7FFFF, 0xC000),
    GOLDEN_REGISTER(mmDB_DEBUG3, 0xFFFFFFFF, 0x280),
    GOLDEN_REGISTER(mmDB_DEBUG4, 0xFFFFFFFF, 0x800000),
    GOLDEN_REGISTER(mmDB_EXCEPTION_CONTROL, 0x7FFF0F1F, 0xB80000),
    GOLDEN_REGISTER(mmGCEA_SDP_TAG_RESERVE0, 0xFFFFFFFF, 0x10100100),
    GOLDEN_REGISTER(mmGCEA_SDP_TAG_RESERVE1, 0xFFFFFFFF, 0x17000088),
    GOLDEN_REGISTER(mmGCR_GENERAL_CNTL, 0x1FF1FFFF, 0x500),
    GOLDEN_REGISTER(mmGCUTCL2_CGTT_CLK_CTRL_Sienna_Cichlid, 0xFF000000, 0xFF008080),
    GOLDEN_REGISTER(mmGCVM_L2_CGTT_CLK_CTRL_Sienna_Cichlid, 0xFF000000, 0xFF008080),
    GOLDEN_REGISTER(mmGE_PC_CNTL, 0x3FFFFF, 0x280400),
    GOLDEN_REGISTER(mmGL2A_ADDR_MATCH_MASK, 0xFFFFFFFF, 0xFFFFFFCF),
    GOLDEN_REGISTER(mmGL2C_ADDR_MATCH_MASK, 0xFFFFFFFF, 0xFFFFFFCF),
    GOLDEN_REGISTER(mmGL2C_CM_CTRL1, 0xFF8FFF0F, 0x580F1008),
    GOLDEN_REGISTER(mmGL2C_CTRL3, 0xF7FFFFFF, 0x10F80988),
    GOLDEN_REGISTER(mmLDS_CONFIG, 0x20, 0x20),
    GOLDEN_REGISTER(mmPA_CL_ENHANCE, 0xF17FFFFF, 0x1200007),
    GOLDEN_REGISTER(mmPA_SC_BINNER_TIMEOUT_COUNTER, 0xFFFFFFFF, 0x800),
    GOLDEN_REGISTER(mmPA_SC_ENHANCE_2, 0xFFFFFFBF, 0x820),
    GOLDEN_REGISTER(mmSPI_CONFIG_CNTL_1, 0xFFFFFFFF, 0x70104),
    GOLDEN_REGISTER(mmSQ_CONFIG, 0xE07DF47F, 0x180070),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER0_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER1_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER10_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER11_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER12_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER13_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER14_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER15_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER2_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER3_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER4_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER5_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER6_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER7_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER8_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER9_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSX_DEBUG_1, 0x10000, 0x10020),
    GOLDEN_REGISTER(mmTA_CNTL_AUX, 0xFFF7FFFF, 0x1030000),
    GOLDEN_REGISTER(mmUTCL1_CTRL, 0xFFBFFFFF, 0xA00000),
    GOLDEN_REGISTER_TERMINATOR,
};

static const CAILIPGoldenRegister gcGoldenSettingsNavi22[] = {
    GOLDEN_REGISTER(mmCGTT_SPI_CS_CLK_CTRL, 0xFF7F0FFF, 0x78000100),
    GOLDEN_REGISTER(mmCGTT_SPI_PS_CLK_CTRL, 0xFF7F0FFF, 0x78000100),
    GOLDEN_REGISTER(mmCGTT_SPI_RA0_CLK_CTRL, 0xFF7F0FFF, 0x30000100),
    GOLDEN_REGISTER(mmCGTT_SPI_RA1_CLK_CTRL, 0xFF7F0FFF, 0x7E000100),
    GOLDEN_REGISTER(mmCPF_GCR_CNTL, 0x7FFFF, 0xC000),
    GOLDEN_REGISTER(mmDB_DEBUG3, 0xFFFFFFFF, 0x280),
    GOLDEN_REGISTER(mmDB_DEBUG4, 0xFFFFFFFF, 0x800000),
    GOLDEN_REGISTER(mmDB_EXCEPTION_CONTROL, 0x7FFF0F1F, 0xB80000),
    GOLDEN_REGISTER(mmGCR_GENERAL_CNTL, 0x1FF1FFFF, 0x500),
    GOLDEN_REGISTER(mmGCUTCL2_CGTT_CLK_CTRL_Sienna_Cichlid, 0xFFFFFFFF, 0xFF008080),
    GOLDEN_REGISTER(mmGCVM_L2_CGTT_CLK_CTRL_Sienna_Cichlid, 0xFFFF8FFF, 0xFF008080),
    GOLDEN_REGISTER(mmGE_PC_CNTL, 0x3FFFFF, 0x280400),
    GOLDEN_REGISTER(mmGL2A_ADDR_MATCH_MASK, 0xFFFFFFFF, 0xFFFFFFCF),
    GOLDEN_REGISTER(mmGL2C_ADDR_MATCH_MASK, 0xFFFFFFFF, 0xFFFFFFCF),
    GOLDEN_REGISTER(mmGL2C_CM_CTRL1, 0xFF8FFF0F, 0x580F1008),
    GOLDEN_REGISTER(mmGL2C_CTRL3, 0xF7FFFFFF, 0xF80988),
    GOLDEN_REGISTER(mmLDS_CONFIG, 0x1FF, 0x20),
    GOLDEN_REGISTER(mmPA_CL_ENHANCE, 0xF17FFFFF, 0x1200007),
    GOLDEN_REGISTER(mmPA_SC_BINNER_TIMEOUT_COUNTER, 0xFFFFFFFF, 0x800),
    GOLDEN_REGISTER(mmPA_SC_ENHANCE_2, 0xFFFFFFBF, 0x820),
    GOLDEN_REGISTER(mmSPI_CONFIG_CNTL_1, 0xFFFFFFFF, 0x70104),
    GOLDEN_REGISTER(mmSPI_START_PHASE, 0xFF, 0x4),
    GOLDEN_REGISTER(mmSQ_CONFIG, 0xE07DF47F, 0x180070),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER0_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER1_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER10_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER11_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER12_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER13_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER14_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER15_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER2_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER3_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER4_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER5_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER6_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER7_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER8_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER9_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSX_DEBUG_1, 0xFFFFFF7F, 0x10020),
    GOLDEN_REGISTER(mmTA_CNTL_AUX, 0xFFF7FFFF, 0x1030000),
    GOLDEN_REGISTER(mmUTCL1_CTRL, 0xFFBFFFFF, 0xA00000),
    GOLDEN_REGISTER(mmVGT_GS_MAX_WAVE_ID, 0xFFF, 0x3FF),
    GOLDEN_REGISTER_TERMINATOR,
};

static const CAILIPGoldenRegister gcGoldenSettingsNavi23[] = {
    GOLDEN_REGISTER(mmCGTT_SPI_CS_CLK_CTRL, 0x78000000, 0x78000100),
    GOLDEN_REGISTER(mmCGTT_SPI_RA0_CLK_CTRL, 0x30000000, 0x30000100),
    GOLDEN_REGISTER(mmCGTT_SPI_RA1_CLK_CTRL, 0x7E000000, 0x7E000100),
    GOLDEN_REGISTER(mmCPF_GCR_CNTL, 0x7FFFF, 0xC000),
    GOLDEN_REGISTER(mmDB_DEBUG3, 0x280, 0x280),
    GOLDEN_REGISTER(mmDB_DEBUG4, 0x7800000, 0x800000),
    GOLDEN_REGISTER(mmGCR_GENERAL_CNTL, 0x1D00, 0x500),
    GOLDEN_REGISTER(mmGE_PC_CNTL, 0x3C0000, 0x280400),
    GOLDEN_REGISTER(mmGL2A_ADDR_MATCH_MASK, 0xFFFFFFFF, 0xFFFFFFCF),
    GOLDEN_REGISTER(mmGL2C_ADDR_MATCH_MASK, 0xFFFFFFFF, 0xFFFFFFCF),
    GOLDEN_REGISTER(mmGL2C_CM_CTRL1, 0x40000000, 0x580F1008),
    GOLDEN_REGISTER(mmGL2C_CTRL3, 0x40000, 0xF80988),
    GOLDEN_REGISTER(mmLDS_CONFIG, 0x20, 0x20),
    GOLDEN_REGISTER(mmPA_CL_ENHANCE, 0x1000000, 0x1200007),
    GOLDEN_REGISTER(mmPA_SC_BINNER_TIMEOUT_COUNTER, 0xFFFFFFFF, 0x800),
    GOLDEN_REGISTER(mmPA_SC_ENHANCE_2, 0x800, 0x820),
    GOLDEN_REGISTER(mmSQ_CONFIG, 0x1F, 0x180070),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER0_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER1_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER10_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER11_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER12_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER13_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER14_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER15_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER2_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER3_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER4_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER5_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER6_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER7_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER8_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSQ_PERFCOUNTER9_SELECT, 0xF0F001FF, 0x0),
    GOLDEN_REGISTER(mmSX_DEBUG_1, 0x10000, 0x10020),
    GOLDEN_REGISTER(mmTA_CNTL_AUX, 0x1030000, 0x1030000),
    GOLDEN_REGISTER(mmUTCL1_CTRL, 0x3A00000, 0xA00000),
    GOLDEN_REGISTER_TERMINATOR,
};

static const CAILASICGoldenRegisters goldenSettingsNavi21[] = {
    GOLDEN_REGISTERS(GC, 0, gcGoldenSettingsNavi21),
    GOLDEN_REGISTERS_TERMINATOR,
};

static const CAILASICGoldenRegisters goldenSettingsNavi22[] = {
    GOLDEN_REGISTERS(GC, 0, gcGoldenSettingsNavi22),
    GOLDEN_REGISTERS_TERMINATOR,
};

static const CAILASICGoldenRegisters goldenSettingsNavi23[] = {
    GOLDEN_REGISTERS(GC, 0, gcGoldenSettingsNavi23),
    GOLDEN_REGISTERS_TERMINATOR,
};
